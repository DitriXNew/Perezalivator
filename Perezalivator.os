///////////////////////////////////////////////////////////////////////
// ПРОГРАММА ДЛЯ "ПЕРЕЗАЛИВКИ" БАЗ
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 15.08.2017
// Ditrix от 06.07.2018

#Использовать json
#Использовать "lib\\gui"
#Использовать TLog
#Использовать "lib\\TRun1CMod"
#Использовать TMSSQL
#Использовать TMail 
#Использовать messenger 

Перем Логирование, УправлениеЭП, TelegramBotID, СписокШагов;
Перем УправляемыйИнтерфейс, ФормаВыбораНастроек, ПолеФормыРасширений, АресХранилищПоУмолчанию,ЛогинХранилищПоУмолчанию,ПарольХранилищПоУмолчанию,СтраницыНастроекРасширений,СтраницаСпискаРасширений,СтраницаНастроек,КнопкаОбновленияРасширений,ГруппаСписковРасширенийДляСкрытия,ПолеЛог;
Перем ТаблицаБазаИсточник, ТаблицаБазаПриемник, ТаблицаПользователи, ТаблицаРасширений, ТаблицаРасширенийВБазе,ТаблицаIDTelegram;
Перем КонтрольАктивныхСеансовПройден, ИндексБазыИсточник, ИндексБазыПриемник;
Перем РежимОтладки, РежимТестирования;

//******************************************************************
Процедура Инициализация()
	
	////////////////////////////////////////
	// Обнулим глобальные перменные
	КонтрольАктивныхСеансовПройден = Ложь;
	ИндексБазыИсточник = 0;
	ИндексБазыПриемник = 0;
	РежимОтладки = Ложь;
	РежимТестирования = Ложь;
	
	
	////////////////////////////////////////
	// Каталог для хранения логов
	ИдентификаторЗадания = "Perezalivator";
	КаталогХраненияЛогов = ".\_Logs\";
	Логирование = Новый ТУправлениеЛогированием(); //TLog
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина;	
	Логирование.СоздатьФайлЛога(ИдентификаторЗадания,КаталогХраненияЛогов);
	
	
	////////////////////////////////////////
	// Настройка электорнной почты
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();
	
	////////////////////////////////////////
	// Список выполняемых шагов
	СписокШагов = Новый Массив;
	СписокШагов.Добавить("Завершать соединения пользователей");
	СписокШагов.Добавить("Установить блокировку базы");
	//СписокШагов.Добавить("Восстановить базу");
	СписокШагов.Добавить("Выполнить код после восстановления");
	//СписокШагов.Добавить("Перевести в простую модель восстановления");
	//СписокШагов.Добавить("Выполнить сжатие лог файла");
	СписокШагов.Добавить("Выполнить переподключение к хранилищу основной базы"); 
	//СписокШагов.Добавить("Выполнить этапы подключения расширений к хранилищам");
	//СписокШагов.Добавить("Выполнить произвольный код после всех действий");
	СписокШагов.Добавить("Снять блокировку сеансов");
	СписокШагов.Добавить("Выполнить подключение к хранилищу основной базы");
	СписокШагов.Добавить("Выполнить подключение к хранилищу основной базы");
	СписокШагов.Добавить("Снять блокировку сеансов");


	////////////////////////////////////////
	// Прочитаем параметры
	
	// Заполняем источники
	ТаблицаБазаИсточник = Новый ТаблицаЗначений;
	ТаблицаБазаИсточник.Колонки.Добавить("Имя");
	ТаблицаБазаИсточник.Колонки.Добавить("ПутьКПлатформе1С");
	ТаблицаБазаИсточник.Колонки.Добавить("ТипБазы");
	ТаблицаБазаИсточник.Колонки.Добавить("ВерсияCOMConnector");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяБазы");
	ТаблицаБазаИсточник.Колонки.Добавить("АдресКластера");
	ТаблицаБазаИсточник.Колонки.Добавить("ПортКластера");
	ТаблицаБазаИсточник.Колонки.Добавить("ПортАгента");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяПользователя");
	ТаблицаБазаИсточник.Колонки.Добавить("ПарольПользователя");
	ТаблицаБазаИсточник.Колонки.Добавить("АдресСервераSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяПользователяSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ПарольПользователяSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяБазыДанныхSQL");
	
	// Заполняем приемники
	ТаблицаБазаПриемник = Новый ТаблицаЗначений;
	ТаблицаБазаПриемник.Колонки.Добавить("Имя");
	ТаблицаБазаПриемник.Колонки.Добавить("TelegramID");
	ТаблицаБазаПриемник.Колонки.Добавить("ПутьКПлатформе1С");
	ТаблицаБазаПриемник.Колонки.Добавить("ТипБазы");
	ТаблицаБазаПриемник.Колонки.Добавить("ВерсияCOMConnector");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяБазы");
	ТаблицаБазаПриемник.Колонки.Добавить("АдресКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПортКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПортАгента");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяАдминистратораКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяАдминистратораКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователя");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователя");
	ТаблицаБазаПриемник.Колонки.Добавить("АдресХранилища");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяХранилища");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяХранилища");	
	ТаблицаБазаПриемник.Колонки.Добавить("АдресСервераSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяБазыДанныхSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("АдресХранилищРасширенийПоУмолчанию");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяРасширенийХранилищаПоУмолчанию");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяРасширенийХранилищаПоУмолчанию");
	ТаблицаБазаПриемник.Колонки.Добавить("ПроизвольныйКодСразуПослеВосстановленияБекапа");
	ТаблицаБазаПриемник.Колонки.Добавить("ПроизвольныйКодПослеВсехОперацийДоСнятияБлокировки");
	
	ТаблицаРасширений = Новый ТаблицаЗначений;
	ТаблицаРасширений.Колонки.Добавить("ИндексБазыПриемник");
	ТаблицаРасширений.Колонки.Добавить("Имя");
	ТаблицаРасширений.Колонки.Добавить("ИспользоватьНастройкиПоУмолчанию");
	ТаблицаРасширений.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаРасширений.Колонки.Добавить("Версия");
	ТаблицаРасширений.Колонки.Добавить("ХешСумма");
	ТаблицаРасширений.Колонки.Добавить("АдресХранилища");
	ТаблицаРасширений.Колонки.Добавить("ИмяПользователяХранилища");
	ТаблицаРасширений.Колонки.Добавить("ПарольПользователяХранилища");
	
	ТаблицаIDTelegram = Новый ТаблицаЗначений;
	ТаблицаIDTelegram.Колонки.Добавить("ИндексБазыПриемник");
	ТаблицаIDTelegram.Колонки.Добавить("ID");
	ТаблицаIDTelegram.Колонки.Добавить("IDBot");
	
	// Прочитаем путь к файлу настроек из командной строки
	МассивФайловНастроек = Новый Массив;
	Для Сч = 0 По АргументыКоманднойСтроки.Количество()-1 Цикл
		Аргумент = АргументыКоманднойСтроки.Получить(Сч);
		Если Лев(Аргумент,1) = "-" Тогда
			// Специальные параметры
			Если СокрЛП(Аргумент) = "-debug" Тогда
				РежимОтладки = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ОТЛАДКИ");
				Сообщить("--------------------------------------------");
			КонецЕсли;
			Если СокрЛП(Аргумент) = "-test" Тогда
				РежимТестирования = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ТЕСТИРОВАНИЯ НАСТРОЕК");
				Сообщить("--------------------------------------------");
			КонецЕсли;
		Иначе
			// Файл с настройками
			МассивФайловНастроек.Добавить(СокрЛП(Аргумент));
		КонецЕсли;
	КонецЦикла;
	
	// Обработаем файлы настроек
	Сч = 0;
	Пока Истина Цикл
		
		ПутьКФайлуНастроек = МассивФайловНастроек.Получить(Сч);
		Файл = Новый Файл(ПутьКФайлуНастроек);
		Если файл.Существует() Тогда
			
			// Получим текст файла
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуНастроек, КодировкаТекста.UTF8);
			ТекстФайлаНастроек = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			Сообщить("Прочитан файл настроек: " + Файл.ПолноеИмя);
			
			Попытка
				ЧтениеJSON = Новый ПарсерJSON;
				ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайлаНастроек,,,Истина);
				ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				ЗавершитьРаботу(1);
			КонецПопытки;
			
			Сч = Сч + 1;			
		Иначе
			Сообщить("Не найден файл настроек по пути: " + ПутьКФайлуНастроек);
			МассивФайловНастроек.Удалить(Сч);
		КонецЕсли;
		
		Если Сч = МассивФайловНастроек.Количество() Тогда
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;
	
	// Если файл не бы передан в параметрах, найдем его в каталоге
	Если МассивФайловНастроек.Количество() = 0 Тогда
		// Попробуем найти файл настроек в текущем каталоге
		ПутьКФайлуНастроек = ОбъединитьПути(ТекущийСценарий().Каталог,"Perezalivator_Params.json");
		Файл = Новый Файл(ПутьКФайлуНастроек);
		Если Не файл.Существует() Тогда
			Если СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек) Тогда
				МассивФайловНастроек.Добавить(ПутьКФайлуНастроек);
				Сообщить("Создан шаблон файла настроек. Заполните файл и перезапустите программу.");
				ЗавершитьРаботуСПаузой();
			Иначе
				ЗавершитьРаботу(1);
			КонецЕсли;
		КонецЕсли;
		МассивФайловНастроек.Добавить(ПутьКФайлуНастроек);
	КонецЕсли;
	
	Если РежимТестирования Тогда
		ВыполнитьТестНастроек();
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////
	// Загружаем внешнюю компоненту oscript-gui.dll
	УправляемыйИнтерфейс = Новый УправляемыйИнтерфейс();
	ФормаВыбораНастроек = УправляемыйИнтерфейс.СоздатьФорму();
	ФормаВыбораНастроек.УстановитьДействие(ЭтотОбъект, "ПриОткрытии", "ПриОткрытииФормы");
	ФормаВыбораНастроек.Показать();	
	
КонецПроцедуры

//******************************************************************
Процедура ЗавершитьРаботуСПаузой()
	
	Сообщить("Для продолжения нажмите любую клавишу...");
	Консоль = Новый Консоль();
	ОбщееОжидание = 0;
	Пока Не Консоль.НажатаКлавиша И ОбщееОжидание < 60000 Цикл
		Приостановить(100);
		ОбщееОжидание = ОбщееОжидание + 100;
	КонецЦикла;
	ЗавершитьРаботу(1);
	
КонецПроцедуры

//******************************************************************
Процедура ПрочитатьПараметрыРекурсивно(Параметры, СтруктураЗначений = "")
	
	Для Каждого Параметр Из Параметры Цикл
		
		//Сообщить("- " + ТипЗнч(Параметр.Значение) + ", " + Строка(Параметр.Ключ) + ", " + Строка(Параметр.Значение));
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура")
			ИЛИ ТипЗнч(Параметр.Значение) = Тип("Соответствие") Тогда
			
			Если Параметр.Ключ = "НастройкиSMTP" Тогда
				СтруктураЗначений = УправлениеЭП.УчетнаяЗаписьЭП;
			ИначеЕсли Параметр.Ключ = "ПолучателиСообщений" Тогда
				СтруктураЗначений = УправлениеЭП.СтруктураСообщения;
			КонецЕсли;
			ПрочитатьПараметрыРекурсивно(Параметр.Значение, СтруктураЗначений);
			
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			
			Для Каждого ЭлементМассива Из Параметр.Значение Цикл
				Если Параметр.Ключ = "Источники" Тогда
					СтруктураЗначений = ТаблицаБазаИсточник.Добавить();
				ИначеЕсли Параметр.Ключ = "Приемники" Тогда
					СтруктураЗначений = ТаблицаБазаПриемник.Добавить();
				ИначеЕсли Параметр.Ключ = "TelegramID" Тогда
					Для Каждого ID Из Параметр.Значение Цикл
						СтруктураЗн = ТаблицаIDTelegram.Добавить();
						СтруктураЗн.ИндексБазыПриемник = ТаблицаБазаПриемник.Количество() - 1;
						СтруктураЗн.ID = ID;
					КонецЦикла;
					Продолжить;
				ИначеЕсли Параметр.Ключ = "Расширения" Тогда
					СтруктураЗначений = ТаблицаРасширений.Добавить();
					СтруктураЗначений.ИндексБазыПриемник = ТаблицаБазаПриемник.Количество() - 1;
				КонецЕсли;
				ПрочитатьПараметрыРекурсивно(ЭлементМассива, СтруктураЗначений)
			КонецЦикла;
			
		Иначе
			Если Параметр.Ключ = "TelegramBotID" Тогда
				TelegramBotID = Параметр.Значение;
			Иначе
				СтруктураЗначений[Параметр.Ключ] = Параметр.Значение;	
			КонецЕсли;		
		КонецЕсли;
		
		
	КонецЦикла;	
КонецПроцедуры

//******************************************************************
Функция СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек)
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ПутьКФайлуНастроек,КодировкаТекста.UTF8);
		ЗаписьТекста.ЗаписатьСтроку(
		"{
		|	""Источники"":
		|	[
		|		{
		|			""Имя"" 					: ""Пример_База_Источник"",
		|			""ПутьКПлатформе1С""		: ""C:\\Program Files\\1cv8\\8.3.xx.xxxx\\bin\\1cv8.exe"",
		|			""ТипБазы""					: ""S"",
		|			""ВерсияCOMConnector""		: ""83"",
		|			""ИмяБазы""					: ""ИмяБазыВКластере"",
		|			""АдресКластера""			: """",
		|			""ПортКластера""			: 1541,
		|			""ПортАгента""				: 1540,
		|			""ИмяПользователя""			: """",
		|			""ПарольПользователя""		: """",
		|			""АдресСервераSQL"" 		: """",
		|			""ИмяПользователяSQL"" 		: """",
		|			""ПарольПользователяSQL"" 	: """",
		|			""ИмяБазыДанныхSQL"" 		: """"
		|		}
		|	],
		|	""Приемники"": 
		|	[
		|		{
		|			""Имя"" : 								""Пример_База_Применик1"",
		|			""TelegramID"":							[],
		|			""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.xх.хххх\\bin\\1cv8.exe"",
		|			""ТипБазы"" : 							""S"",
		|			""ВерсияCOMConnector"" :				""83"",
		|			""ИмяБазы"" : 							"""",
		|			""АдресКластера"" : 					"""",
		|			""ПортКластера"" : 						""1541"",
		|			""ПортАгента"" :						""1540"",
		|			""ИмяПользователя"" : 					"""",
		|			""ПарольПользователя"" :				"""",
		|			""АдресХранилища"" :					"""",
		|			""ИмяПользователяХранилища"" : 			"""",
		|			""ПарольПользователяХранилища"" : 		"""",	
		|			""АдресСервераSQL"" : 					"""",
		|			""ИмяПользователяSQL"" : 				"""",
		|			""ПарольПользователяSQL"" : 			"""",
		|			""ИмяБазыДанныхSQL"" : 					"""",
		|			""АдресХранилищРасширенийПоУмолчанию"": """",
		|			""ИмяПользователяРасширенийХранилищаПоУмолчанию""		: """",
		|			""ПарольПользователяРасширенийХранилищаПоУмолчанию""	: """",
		|			""ПроизвольныйКодСразуПослеВосстановленияБекапа""		: """",
		|			""ПроизвольныйКодПослеВсехОперацийДоСнятияБлокировки""	: """",
		|			""Расширения"": [
		|				{
		|					""Имя""							: ""Имя расширения как в конфигурации"",
		|					""ИспользоватьНастройкиПоУмолчанию"": false,
		|					""АдресХранилища""				: """",
		|					""ИмяПользователяХранилища""	: """",
		|					""ПарольПользователяХранилища""	: """"
		|				},
		|				{
		|					""Имя""							: ""Имя расширения как в конфигурации"",
		|					""ИспользоватьНастройкиПоУмолчанию"": true,
		|					""АдресХранилища""				: """",
		|					""ИмяПользователяХранилища""	: """",
		|					""ПарольПользователяХранилища""	: """"
		|				}
		|			]
		|		},
		|		{
		|			""Имя"" : 								""Пример_База_Применик2"",
		|			""TelegramID"":							[],
		|			""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.х.хххх\\bin\\1cv8.exe"",
		|			""ТипБазы"" : 							""S"",
		|			""ВерсияCOMConnector"" :				""83"",
		|			""ИмяБазы"" : 							"""",
		|			""АдресКластера"" : 					"""",
		|			""ПортКластера"" : 						""1541"",
		|			""ПортАгента"" :						""1540"",
		|			""ИмяПользователя"" : 					"""",
		|			""ПарольПользователя"" :				"""",
		|			""АдресХранилища"" :					"""",
		|			""ИмяПользователяХранилища"" : 			"""",
		|			""ПарольПользователяХранилища"" : 		"""",	
		|			""АдресСервераSQL"" : 					"""",
		|			""ИмяПользователяSQL"" : 				"""",
		|			""ПарольПользователяSQL"" : 			"""",
		|			""ИмяБазыДанныхSQL"" : 					"""",
		|			""АдресХранилищРасширенийПоУмолчанию"": """",
		|			""ИмяПользователяРасширенийХранилищаПоУмолчанию""		: """",
		|			""ПарольПользователяРасширенийХранилищаПоУмолчанию""	: """",
		|			""ПроизвольныйКодСразуПослеВосстановленияБекапа""		: """",
		|			""ПроизвольныйКодПослеВсехОперацийДоСнятияБлокировки""	: """",
		|			""Расширения"": []
		|		}
		|	],
		|	""ЭлектроннаяПочта"": 
		|	{
		|		""НастройкиSMTP"":
		|		{
		|			""АдресSMTP"" : 						"""",
		|			""ПортSMTP"" : 							465,
		|			""ПользовательSMTP"" : 					"""",
		|			""ПарольSMTP"" : 						"""",
		|			""ИспользоватьSSL"" : 					true
		|		},
		|		""ПолучателиСообщений"":
		|		{
		|			""АдресЭлектроннойПочтыПолучателя"" : 	""myname@domen.ru;""
		|		}
		|	},
		|	""ПрочиеНастройки"": {
		|		""TelegramBotID"": """"
		|		}
		|}");
		ЗаписьТекста.Закрыть();
	Исключение
		Возврат Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//******************************************************************
Процедура ПриОткрытииФормы() Экспорт
	
	ФормаВыбораНастроек.Заголовок = "ПЕРЕЗАЛИВАТОР v2.0 (DitriX)";
	ФормаВыбораНастроек.Высота = 480;
	ФормаВыбораНастроек.Ширина = 680;
	
	// ПолеСоСпискомИсточник
	Данные = Новый Соответствие; Сч = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаБазаИсточник Цикл
		Данные.Вставить(СтрокаТаблицы.Имя, Сч); Сч = Сч + 1;
	КонецЦикла;
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеСоСпискомИсточник", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "База источник:    ";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеСоСписком;
	ПолеФормы.СписокВыбора = Данные;
	ПолеФормы.Значение = 0;
	ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеСоСпискомИсточник");
	
	// ПолеСоСпискомПриемник
	Данные = Новый Соответствие; Сч = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаБазаПриемник Цикл
		Данные.Вставить(СтрокаТаблицы.Имя, Сч); Сч = Сч + 1;
	КонецЦикла;
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеСоСпискомПриемник", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "База назначения:";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеСоСписком;
	ПолеФормы.СписокВыбора = Данные;
	ПолеФормы.Значение = 0;
	ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеСоСпискомПриемник");
	
	// Дата
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("Дата", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "Перезаливать на дату:";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеКалендаря;
	ПолеФормы.Значение = ТекущаяДата();
	
	// Работая с расширениями--------------------------------------------------------
	ГруппаСписковРасширенийДляСкрытия = ФормаВыбораНастроек.Элементы.Добавить("ГруппаСписковРасширенийДляСкрытия", "ГруппаФормы", Неопределено);
	ГруппаСписковРасширенийДляСкрытия.Вид = УправляемыйИнтерфейс.ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписковРасширенийДляСкрытия.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Верх;
	
	СтраницыНастроекРасширений = ФормаВыбораНастроек.Элементы.Добавить("СтраницыРасширений", "ГруппаФормы", ГруппаСписковРасширенийДляСкрытия);	
	СтраницыНастроекРасширений.Вид = ФормаВыбораНастроек.ВидГруппыФормы.Страницы;	
	СтраницыНастроекРасширений.Заголовок = "Страницы";	
	СтраницыНастроекРасширений.Высота = 400;		
	
	СтраницаСпискаРасширений = ФормаВыбораНастроек.Элементы.Добавить("СтраницаСпискаРасширений", "ГруппаФормы", СтраницыНастроекРасширений);	
	СтраницаСпискаРасширений.Вид = ФормаВыбораНастроек.ВидГруппыФормы.Страница;
	СтраницаСпискаРасширений.Заголовок = "Список расширений";		
	
	КнопкаОбновленияРасширений = ФормаВыбораНастроек.Элементы.Добавить("КнопкаОбновитьСписокРасширений", "КнопкаФормы", СтраницаСпискаРасширений);
	КнопкаОбновленияРасширений.Заголовок = "Обновить список расширений";
	КнопкаОбновленияРасширений.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуОбновитьСписокРасширений");
	
	// ПолеРасширений
	ПолеФормыРасширений = ФормаВыбораНастроек.Элементы.Добавить("ПолеРасширений", "ТаблицаФормы", СтраницаСпискаРасширений);
	ПолеФормыРасширений.Заголовок = "Списки используемых расширений:";
	ПолеФормыРасширений.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Нет;
	ПолеФормыРасширений.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Верх;
	ПолеФормыРасширений.Высота = 400;
	
	СтраницаНастроек = ФормаВыбораНастроек.Элементы.Добавить("СтраницаНастроек", "ГруппаФормы", СтраницыНастроекРасширений);	
	СтраницаНастроек.Вид = ФормаВыбораНастроек.ВидГруппыФормы.Страница;
	СтраницаНастроек.Заголовок = "Настройки подключений";	
	
	АресХранилищПоУмолчанию = ФормаВыбораНастроек.Элементы.Добавить("АресХранилищПоУмолчанию", "ПолеФормы", СтраницаНастроек);
	АресХранилищПоУмолчанию.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеВвода;
	АресХранилищПоУмолчанию.Заголовок = "Адрес";
	АресХранилищПоУмолчанию.Значение = ТаблицаБазаПриемник[0].АдресХранилищРасширенийПоУмолчанию;
	
	ЛогинХранилищПоУмолчанию = ФормаВыбораНастроек.Элементы.Добавить("ЛогинХранилищПоУмолчанию", "ПолеФормы", СтраницаНастроек);
	ЛогинХранилищПоУмолчанию.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеВвода;
	ЛогинХранилищПоУмолчанию.Заголовок = "Логин";
	ЛогинХранилищПоУмолчанию.Значение = ТаблицаБазаПриемник[0].ИмяПользователяРасширенийХранилищаПоУмолчанию;
	
	ПарольХранилищПоУмолчанию = ФормаВыбораНастроек.Элементы.Добавить("ПарольХранилищПоУмолчанию", "ПолеФормы", СтраницаНастроек);
	ПарольХранилищПоУмолчанию.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеВвода;
	ПарольХранилищПоУмолчанию.Заголовок = "Пароль";
	ПарольХранилищПоУмолчанию.Значение = ТаблицаБазаПриемник[0].ПарольПользователяРасширенийХранилищаПоУмолчанию;
	
	// Работая с расширениями-------------------------------------------------
	
	// ПолеЛог
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеЛог", "ПолеФормы", Неопределено);
	ПолеФормы.Вид  = ФормаВыбораНастроек.ВидПоляФормы.ПолеНадписи;
	ПолеФормы.Заголовок = "Лог выполнения обработки:";
	ПолеФормы.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Верх;	
	ПолеФормы.Высота = 220;
	ПолеФормы.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Верх;
	
	// ПолеПользователи
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеПользователи", "ТаблицаФормы", Неопределено);
	ПолеФормы.Заголовок = "ВНИМАНИЕ! Имеются активые соединения с базой приемником:";
	ПолеФормы.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Верх;
	ПолеФормы.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Заполнение;
	
	Группа = ФормаВыбораНастроек.Элементы.Добавить("ГруппаКнопки", "ГруппаФормы", Неопределено);
	Группа.Вид = УправляемыйИнтерфейс.ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Низ;
	
	ОповеститьОНачалеВосстановления = ФормаВыбораНастроек.Элементы.Добавить("ОповеститьОНачалеВосстановления", "КнопкаФормы", Группа);
	ОповеститьОНачалеВосстановления.Заголовок = "Предупредить о восстановлении";
	ОповеститьОНачалеВосстановления.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуОповеститьОНачалеВосстановления");
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаВыполнить", "КнопкаФормы", Группа);
	Кнопка.Заголовок = "Перезалить базу";
	Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуВыполнить");
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаОбновить", "КнопкаФормы", Группа);
	Кнопка.Заголовок = "Обновить";
	Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуОбновить");
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаЗакрыть", "КнопкаФормы", Группа);
	Кнопка.Заголовок = "Закрыть";
	Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуЗакрыть");
	
	УправлениеДиалогом(0);
	
КонецПроцедуры

//******************************************************************
Процедура УправлениеДиалогом(Этап = 0)
	
	Если Этап = 0 Тогда
		ТекстКнопкиВыполнить = "Перезалить базу";
		ДоступностьНастроек = Истина;
		ДоступностьОбновитьОтмена = Ложь;
		ВидимостьПолеПользователи = Ложь;
	ИначеЕсли Этап = 1 Тогда
		Если ТаблицаПользователи <> Неопределено И ТаблицаПользователи.Количество() = 0 Тогда
			ТекстКнопкиВыполнить = "Перезалить базу";
		Иначе
			ТекстКнопкиВыполнить = "ЗАВЕРШИТЬ ВСЕ СЕАНСЫ И ПРОДОЛЖИТЬ";
		КонецЕсли;
		ДоступностьНастроек = Ложь;
		ДоступностьОбновитьОтмена = Истина;
		ВидимостьПолеПользователи = Истина;
	Иначе
		ТекстКнопкиВыполнить = "Перезалить базу";
		ДоступностьНастроек = Истина;
		ДоступностьОбновитьОтмена = Ложь;
		ВидимостьПолеПользователи = Ложь;		
	КонецЕсли;
	
	ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомИсточник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомПриемник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("Дата").Доступность = ДоступностьНастроек;
	
	ПолеПользователи = ФормаВыбораНастроек.Элементы.Найти("ПолеПользователи");
	ПолеЛог = ФормаВыбораНастроек.Элементы.Найти("ПолеЛог");
	Если ВидимостьПолеПользователи Тогда
		Если ТаблицаПользователи <> Неопределено Тогда
			ПровайдерТЗ = Новый Провайдер;
			ПровайдерТЗ.Источник = ТаблицаПользователи;
			ПолеПользователи.ПутьКДанным = ПровайдерТЗ;
		КонецЕсли;
		ПолеЛог.Видимость = Ложь;
		ПолеПользователи.Видимость = Истина;
	Иначе
		ПолеПользователи.Видимость = Ложь;
		ПолеЛог.Видимость = Истина;
	КонецЕсли;
	
	ГруппаКнопки = ФормаВыбораНастроек.Элементы.Найти("ГруппаКнопки");		
	ГруппаКнопки.Элементы.Найти("КнопкаВыполнить").Заголовок = ТекстКнопкиВыполнить;
	ГруппаКнопки.Элементы.Найти("КнопкаОбновить").Доступность = ДоступностьОбновитьОтмена;	
	
КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеСоСпискомИсточник() Экспорт
	
	ИндексБазыИсточник = ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомИсточник").Значение;
	
	ПриНажатииНаКнопкуОбновитьСписокРасширений(Истина);
	
КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеСоСпискомПриемник() Экспорт
	
	ИндексБазыПриемник = ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомПриемник").Значение;
	ОбновитьПараметрыПодключенияПоУмолчанию();
	ПриНажатииНаКнопкуОбновитьСписокРасширений(Истина);
КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуЗакрыть() Экспорт
	
	ФормаВыбораНастроек.Закрыть();
	
КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуОбновить() Экспорт
	
	Если Не ПолучитьСписокАктивныхСеансов() Тогда
		УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не удалось проверить список активных пользователей базы приемника!",,"Ошибка!");
		Возврат;
	КонецЕсли;
	УправлениеДиалогом(1);
	
КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуВыполнить() Экспорт
	
	// Проверим, что все поля заполнены
	Если ИндексБазыИсточник = -1 Тогда
		УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не выбрана база источник!",,"Внимание!");
		Возврат;
	КонецЕсли;
	Если ИндексБазыПриемник = -1 Тогда
		УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не выбрана база приемник!",,"Внимание!");
		Возврат;
	КонецЕсли;	
	
	// Проверим, есть ли активные сеансты с базой приемником
	ВыполнитьОбработку = Ложь;
	НетДоступаККонсолиКластера = Ложь;
	Если Не КонтрольАктивныхСеансовПройден Тогда
		
		Если Не ПолучитьСписокАктивныхСеансов() Тогда
			Ответ = УправляемыйИнтерфейс.СтандартныеДиалоги.Вопрос("Не удалось проверить список активных пользователей базы приемника! Продолжить?",РежимДиалогаВопрос.ДаНет,,,"Все равно продолжить операцию?");
			Если Ответ = КодВозвратаДиалога.Да Тогда	
				НетДоступаККонсолиКластера = Истина;
				ВыполнитьОбработку = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НетДоступаККонсолиКластера Тогда
			
			Если ТаблицаПользователи = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// Если есть активные соединения, покажим их
			Если ТаблицаПользователи.Количество() = 0 Тогда
				ВыполнитьОбработку = Истина;
			Иначе
				УправлениеДиалогом(1);
				КонтрольАктивныхСеансовПройден = Истина;			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработку = Истина;
	КонецЕсли;
	
	// Можно выполнить обработку
	Если ВыполнитьОбработку Тогда
		
		Ответ = УправляемыйИнтерфейс.СтандартныеДиалоги.Вопрос("Вы уверены что хотите перезалить базу?",РежимДиалогаВопрос.ДаНет,,,"Последнее предупреждение!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			УправлениеДиалогом(0);
			Если ВыполнитьОбработку(НетДоступаККонсолиКластера) Тогда
				УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Обработка выполнена УСПЕШНО!",,"Успех!");
			Иначе
				УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("ОБРАБОТКА НЕ ВЫПОЛНЕНА!",,"ОШИБКА!");
			КонецЕсли;		
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуОповеститьОНачалеВосстановления() Экспорт
	БазаИсточник = ТаблицаБазаИсточник.Получить(ИндексБазыИсточник);
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);	
	
	СтрокаДействие = "Планируется сделать копию базы из " + БазаИсточник.Имя + " в " + БазаПриемник.Имя;
	ЗаписатьЛог(СтрокаДействие);
КонецПроцедуры

Процедура ОтправитьСообщение(ТекстСообщения) Экспорт
	Мессенджер = Новый Мессенджер();
	ДанныеБазы = ТаблицаIDTelegram.НайтиСтроки(Новый Структура("ИндексБазыПриемник", ИндексБазыПриемник));
	Для Каждого Стр Из ДанныеБазы Цикл
		BotID = ?(ЗначениеЗаполнено(Стр.IDBot),Стр.IDBot,TelegramBotID);
		Мессенджер.ИнициализироватьТранспорт("telegram", Новый Структура("Логин", BotID));
		Мессенджер.ОтправитьСообщение("telegram", Стр.ID, "```" + ТекстСообщения + "```", ,"md");
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьЛог(СтрокаДействие) Экспорт
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	ОтправитьСообщение(СтрокаДействие);
КонецПроцедуры
//******************************************************************
Процедура ПриНажатииНаКнопкуОбновитьСписокРасширений(Очистить = Ложь) Экспорт
	
	Если Очистить Тогда
		ТаблицаРасширенийВБазе = Новый ТаблицаЗначений;
	Иначе
		// База источник из таблицы
		БазаИсточник = ТаблицаБазаИсточник.Получить(ИндексБазыИсточник);
		
		Запуск1С = Новый ТУправлениеЗапуском1С();
		ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаИсточник);
		ТаблицаРасширенийВБазе = Запуск1С.ПолучитьСписокРасширений();
		Если ТаблицаРасширенийВБазе = Неопределено Тогда
			ОтправитьСообщение("ОШИБКА подключения к базе, для получения списка расширений - " + Запуск1С.ТекстОшибки);
			ТаблицаРасширенийВБазе = Новый ТаблицаЗначений;
		Иначе
			
			Для Каждого Расширение Из ТаблицаРасширенийВБазе Цикл
				Строки = ТаблицаРасширений.НайтиСтроки(Новый Структура("ИндексБазыПриемник, Имя", ИндексБазыПриемник, Расширение.Имя));
				Если Строки.Количество() = 0 Тогда 
					Продолжить 
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Расширение, Строки[0], , "УникальныйИдентификатор, Версия, ХешСумма");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПровайдерТЗ = Новый Провайдер;
	ПровайдерТЗ.Источник = ТаблицаРасширенийВБазе;
	ПолеФормыРасширений.ПутьКДанным = ПровайдерТЗ;
	
КонецПроцедуры

//******************************************************************
Процедура ОбновитьПараметрыПодключенияПоУмолчанию() Экспорт
	// База источник из таблицы 
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
	АресХранилищПоУмолчанию.Значение = БазаПриемник.АдресХранилищРасширенийПоУмолчанию;
	ЛогинХранилищПоУмолчанию.Значение = БазаПриемник.ИмяПользователяРасширенийХранилищаПоУмолчанию;
	ПарольХранилищПоУмолчанию.Значение = БазаПриемник.ПарольПользователяРасширенийХранилищаПоУмолчанию;
	
	МассивДоступныхРасширений = ТаблицаРасширений.НайтиСтроки(Новый Структура("ИндексБазыПриемник", Число(ИндексБазыПриемник)));
	ИспользуетсяПроверкаРасширений = МассивДоступныхРасширений.Количество() > 0;
	
	ГруппаСписковРасширенийДляСкрытия.Видимость = ИспользуетсяПроверкаРасширений;
КонецПроцедуры

//******************************************************************
Функция ПолучитьСписокАктивныхСеансов()
	
	// База применик из таблицы
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
	
	// Получаем список сеансов
	Запуск1С = Новый ТУправлениеЗапуском1С();
	ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);
	ТаблицаПользователи = Запуск1С.ПолучитьСписокСеансов();
	
	Если ТаблицаПользователи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//******************************************************************
Функция ВыполнитьТестНастроек()
	
	//
	БылиОшибки = Ложь;
	
	// Начало выполнения обработки
	СтрокаДействие  = "Начало выполнения тестирвоания настроек:";
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	Логирование.УвеличитьУровень();
	
	// Создадим объекты
	УправлениеMSSQL = Новый УправлениеMSSQL();
	Запуск1С = Новый ТУправлениеЗапуском1С();
	
	// Цикл по всем базам источникам
	Для Каждого БазаИсточник ИЗ ТаблицаБазаИсточник Цикл
		
		Логирование.ЗаписатьСтрокуЛога();
		Логирование.ЗаписатьСтрокуЛога("Тест БД Источника: " + БазаИсточник.Имя);
		
		УправлениеMSSQL.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаИсточник);
		
		// Получим структуру файлов БД Источника
		// Если структура файлов получена, считаем, что параметры подключения заданы корректно
		ТаблицаФайловБД = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБД = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБД.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Источинка - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		
	КонецЦикла;
	
	// Цикл по всем базам приемникам
	Для Каждого БазаПриемник ИЗ ТаблицаБазаПриемник Цикл
		
		Логирование.ЗаписатьСтрокуЛога();
		Логирование.ЗаписатьСтрокуЛога("Тест БД Приемника: " + БазаПриемник.Имя);
		
		УправлениеMSSQL.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаПриемник);
		
		// Получим структуру файлов БД Приемника
		// Если структура файлов получена, считаем, что параметры подключения заданы корректно
		ТаблицаФайловБД = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБД = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Приемника - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБД.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Приемника - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Приемника - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		
		Запуск1С.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);
		
		// Получим список активных соединений БД Приемника
		// Если список сеансов получен, считаем, что настройки базы заданы корректно
		ТаблицаСеансов = Запуск1С.ПолучитьСписокСеансов();
		Если ТаблицаСеансов = Неопределено Тогда
			СтрокаДействие = "Получить список сеансов БД Приемника - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить список сеансов БД Приемника - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		
		// Выполним очистку локального кэша хранилища конфигурации
		// Если получилось очистить, считаем, что настройки хранилища и настройки 1С:Предприятие заданы корректно
		Если ЗначениеЗаполнено(Запуск1С.ПараметрыЗапуска.АдресХранилища) Тогда
			Если Запуск1С.ВыполнитьОчисткуЛокальногоКешаХранилища() Тогда
				СтрокаДействие = "Очистить локальный кэш хранилища конфигурации - УСПЕШНО";
			Иначе
				СтрокаДействие = "Очистить локальный кэш хранилища конфигурации - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДействие  = "Завершение выполнения обработки.";
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	
	Сообщить("--------------------------------------------");
	Сообщить("Рзультат тестирования: " + ?(БылиОшибки,"БЫЛИ ОШИБКИ!","УСПЕШНО!"));
	Сообщить("--------------------------------------------");
	
	Возврат Не БылиОшибки;
	
КонецФункции

//******************************************************************
Функция ВыполнитьОбработку(НетДоступаККонсолиКластера=Ложь)
	


	//Говорим, что будем обновлять конфу в шаге загрузки из хранилища, иначе будет много времени занимать
	ОбновлятьКонфигурациюПослеЗагрузки = Истина;

	РасширениеВыполненияКодаУстановлено = Ложь;
	БылиОшибки = Ложь;
	БазаВосстановлена = Ложь;
	ПолеЛог = ФормаВыбораНастроек.Элементы.Найти("ПолеЛог");
	ПолеЛог.Видимость = Истина;
	
	// Начало выполнения обработки
	СтрокаДействие  = "Начало выполнения обработки.";
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	Логирование.УвеличитьУровень();
	ПолеЛог.Значение = СтрокаДействие;
	
	// База применик из таблицы
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
	Запуск1С = Новый ТУправлениеЗапуском1С();
	ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);

	// Завершим соединения, если необходимо
	Если Не НетДоступаККонсолиКластера 
		И НЕ СписокШагов.Найти("Завершать соединения пользователей") = Неопределено Тогда
		Если ТаблицаПользователи.Количество() > 0 Тогда
			Если Запуск1С.ЗавершитьРаботуПользователей() Тогда
				СтрокаДействие = "Завершить работу пользователей - УСПЕШНО";
			Иначе
				СтрокаДействие = "Завершить работу пользователей - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
	КонецЕсли;
	
	// Установим блокировку начала сеансов
	Если Не НетДоступаККонсолиКластера 
		И НЕ СписокШагов.Найти("Установить блокировку базы") = Неопределено Тогда
		Если Не БылиОшибки Тогда
			Если Запуск1С.УстановитьБлокировкуНачалаСеансов() Тогда
				СтрокаДействие = "Установить блокировку начала сеансов - УСПЕШНО";
			Иначе
				СтрокаДействие = "Установить блокировку начала сеансов - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	// База источник из таблицы
	Если Не БылиОшибки Тогда
		БазаИсточник = ТаблицаБазаИсточник.Получить(ИндексБазыИсточник);
		УправлениеMSSQL = Новый УправлениеMSSQL();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаИсточник);
	КонецЕсли;
	
	// Получим список файлов для восстановления
	Если Не БылиОшибки Тогда
		ТекДата = ФормаВыбораНастроек.Элементы.Найти("Дата").Значение;
		МассивФайлов = УправлениеMSSQL.ПолучитьСписокФайловДляВосстановленияБД(КонецДня(ТекДата)); 
		Если МассивФайлов <> Неопределено Тогда
			СтрокаДействие = "Получить список файлов для восстановления БД - УСПЕШНО";
			ЗаписатьЛог(СтрокаДействие);
			СтрокаДействие = "";
			Для Сч = 0 По МассивФайлов.Количество()-1 Цикл
				Если СтрДлина(СтрокаДействие) + СтрДлина(МассивФайлов.Получить(Сч)) > 4000 Тогда
					ЗаписатьЛог(СтрокаДействие);
					СтрокаДействие = "";
				КонецЕсли;

				СтрокаДействие = СтрокаДействие + Символы.ПС + "    Файл: " + МассивФайлов.Получить(Сч);				
				
			КонецЦикла;
			ЗаписатьЛог(СтрокаДействие);
		Иначе
			СтрокаДействие = "Получить список файлов для восстановления БД - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			ЗаписатьЛог(СтрокаДействие);
			БылиОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Получим структуру файлов БД Источника
	Если Не БылиОшибки Тогда
		ТаблицаФайловБДИсточника = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБДИсточника = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБДИсточника.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Источинка - УСПЕШНО";
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);
	КонецЕсли;
	
	// База применик из таблицы
	Если Не БылиОшибки Тогда
		УправлениеMSSQL = Новый УправлениеMSSQL();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаПриемник);
	КонецЕсли;	
	
	// Восстановим базу
	Если Не БылиОшибки 
		И НЕ СписокШагов.Найти("Восстановить базу") = Неопределено Тогда
		Если УправлениеMSSQL.ВосстановитьИзРезервнойКопииБД(МассивФайлов,ТаблицаФайловБДИсточника) Тогда
			СтрокаДействие = "Восстановить из резервной копии БД - УСПЕШНО";
			БазаВосстановлена = Истина;
		Иначе
			СтрокаДействие = "Восстановить из резервной копии БД - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);		
	КонецЕсли;
	
	// Выполним первый кусок кода, сразу после востанновления бекапа
	Если Не БылиОшибки 
		И ЗначениеЗаполнено(БазаПриемник.ПроизвольныйКодСразуПослеВосстановленияБекапа) 
		И НЕ СписокШагов.Найти("Выполнить код после восстановления") = Неопределено
		Тогда

		ЗаписатьЛог("Начало выполнения произвольного кода после восстановления");

		Запуск1С.ПараметрыЗапуска.ИмяРасширения = "ВыполнениеКодаИзПерезаливатора";
		Если Запуск1С.ЗагрузитьКонфигурациюИзФайла("ExtRunCode.cfe", ОбновлятьКонфигурациюПослеЗагрузки) Тогда
			СтрокаДействие = "Подключение расширения для выполнения кода - УСПЕШНО";
			РасширениеВыполненияКодаУстановлено = Истина;
		Иначе
			СтрокаДействие = "Подключение расширения для выполнения кода - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);		
		
		Если Не БылиОшибки И НЕ ОбновлятьКонфигурациюПослеЗагрузки Тогда
			Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
				СтрокаДействие = "Обновить конфигурацию базы данных - УСПЕШНО";
			Иначе
				СтрокаДействие = "Обновить конфигурацию базы данных  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);		
		КонецЕсли;
		
		Если Не БылиОшибки Тогда
			Попытка
				
				// Получаем COMConnector
				Коннектор = Новый COMОбъект("v" + Запуск1С.ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
				// Получаем Соединение с базой данных
				ПараметрыПодключенияКБазеИсточника = "Srvr=""" + Запуск1С.ПараметрыЗапуска.АдресКластера + 
				""";Ref=""" + Запуск1С.ПараметрыЗапуска.ИмяБазы + 
				""";Usr=""" + Запуск1С.ПараметрыЗапуска.ИмяПользователя + 
				""";Pwd=""" + Запуск1С.ПараметрыЗапуска.ПарольПользователя + 
				?(ЗначениеЗаполнено(Запуск1С.ПараметрыЗапуска.КодРазрешения), """;UC=""" + Запуск1С.ПараметрыЗапуска.КодРазрешения,"") + """;";
				
				СоединениеСБазой = Коннектор.Connect(ПараметрыПодключенияКБазеИсточника);
				
				РезультатВыполненияКода = СоединениеСБазой.ВКИП_ВыполнениеКода.ВыполнитьКод(БазаПриемник.ПроизвольныйКодСразуПослеВосстановленияБекапа);
				СтрокаДействие = "Код после восстановления выполнен - УСПЕШНО: " + РезультатВыполненияКода;
				
			Исключение		
				ТекстОшибки = ОписаниеОшибки();
				СтрокаДействие = "Код после восстановления НЕ выполнен - ОШИБКА: " + ТекстОшибки;
			КонецПопытки;	
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(БазаПриемник.ПроизвольныйКодПослеВсехОперацийДоСнятияБлокировки) Тогда
			Если Запуск1С.УдалитьКонфигурациюРасширенияБазыДанных() Тогда
				СтрокаДействие = "Удаление расширения для выполнения код - УСПЕШНО";
				РасширениеВыполненияКодаУстановлено = Ложь;
			Иначе
				СтрокаДействие = "Удаление расширения для выполнения код - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
		Запуск1С.ПараметрыЗапуска.ИмяРасширения = "";
	КонецЕсли;
	
	// Переведем в простую модель восстановления
	Если Не БылиОшибки И НЕ СписокШагов.Найти("Перевести в простую модель восстановления") = Неопределено Тогда
		Если УправлениеMSSQL.ИзменитьМодельВосстановленияБД("SIMPLE") Тогда
			СтрокаДействие = "Перевести в простую модель восстановления - УСПЕШНО";
		Иначе
			СтрокаДействие = "Перевести в простую модель восстановления - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);		
	КонецЕсли;
	
	// Запустим сжатие лог-файла
	Если Не БылиОшибки 	И НЕ СписокШагов.Найти("Выполнить сжатие лог файла") = Неопределено Тогда
		Если УправлениеMSSQL.СжатьФайлыБД("LOG") Тогда
			СтрокаДействие = "Сжать файл логов - УСПЕШНО";
		Иначе
			СтрокаДействие = "Сжать файл логов - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);		
	КонецЕсли;
	
	// Если база была подключена к хранилищу, необходимо переподключится
	Если ЗначениеЗаполнено(БазаПриемник.АдресХранилища) И Не БылиОшибки 
		И НЕ СписокШагов.Найти("Выполнить подключение к хранилищу основной базы") = Неопределено 
		Тогда
		
		// Отключимся от хранилища базы источника
		Если Не БылиОшибки 
			И НЕ СписокШагов.Найти("Выполнить отключение от хранилища основной базы") = Неопределено Тогда
			Если Запуск1С.ОтключитьКонфигурациюОтХранилища() Тогда
				СтрокаДействие = "Отключиться от хранилища - УСПЕШНО";
			Иначе
				СтрокаДействие = "Отключиться от хранилища  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);		
		КонецЕсли;
		
		// Подключимся к старому хранилищу
		Если Не БылиОшибки 
			И НЕ СписокШагов.Найти("Выполнить подключение к хранилищу основной базы") = Неопределено
			Тогда
			Если Запуск1С.ПодключитьКонфигурациюКХранилищу() Тогда
				СтрокаДействие = "Подключиться к хранилищу - УСПЕШНО";
			Иначе
				СтрокаДействие = "Подключиться к хранилищу  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);		
		КонецЕсли;
		
		// Обновим конфигурацию из хранилища
		Если Не БылиОшибки И НЕ СписокШагов.Найти("Выполнить обновление конфы из хранилища основной базы") = Неопределено Тогда
			Если Запуск1С.ОбновитьКонфигурациюИзХранилища(,,,ОбновлятьКонфигурациюПослеЗагрузки) Тогда
				СтрокаДействие = "Обновить конфигурацию из хранилища - УСПЕШНО";
			Иначе
				СтрокаДействие = "Обновить конфигурацию из хранилища  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);		
		КонецЕсли;
		
		// Обновить конфигурацию базы данных
		Если Не БылиОшибки И НЕ ОбновлятьКонфигурациюПослеЗагрузки Тогда
			Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
				СтрокаДействие = "Обновить конфигурацию базы данных - УСПЕШНО";
			Иначе
				СтрокаДействие = "Обновить конфигурацию базы данных  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);		
		КонецЕсли;
		
	КонецЕсли;
	
	// Подключим к хранилищу расширения
	Если НЕ ТаблицаРасширенийВБазе = Неопределено И Не БылиОшибки И НЕ СписокШагов.Найти("Выполнить этапы подключения расширений к хранилищам") = Неопределено Тогда
		Для Каждого Расширение Из ТаблицаРасширенийВБазе Цикл
			
			Если ЗначениеЗаполнено(Расширение.АдресХранилища) ИЛИ (ЗначениеЗаполнено(БазаПриемник.АдресХранилищРасширенийПоУмолчанию) И Расширение.ИспользоватьНастройкиПоУмолчанию) Тогда
				
				ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,Расширение,"АдресХранилища, ИмяПользователяХранилища, ПарольПользователяХранилища");
				Запуск1С.ПараметрыЗапуска.ИмяРасширения = Расширение.Имя;
				
				Если Расширение.ИспользоватьНастройкиПоУмолчанию Тогда
					Если НЕ ЗначениеЗаполнено(Расширение.АдресХранилища) Тогда
						Запуск1С.ПараметрыЗапуска.АдресХранилища = БазаПриемник.АдресХранилищРасширенийПоУмолчанию + Расширение.Имя;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Расширение.ИмяПользователяХранилища) Тогда
						Запуск1С.ПараметрыЗапуска.ИмяПользователяХранилища = БазаПриемник.ИмяПользователяРасширенийХранилищаПоУмолчанию;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Расширение.ПарольПользователяХранилища) Тогда
						Запуск1С.ПараметрыЗапуска.ПарольПользователяХранилища = БазаПриемник.ПарольПользователяРасширенийХранилищаПоУмолчанию;
					КонецЕсли;
				КонецЕсли;
				
				// Отключимся от хранилища базы источника
				Если Не БылиОшибки Тогда
					Если Запуск1С.ОтключитьКонфигурациюОтХранилища() Тогда
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Отключиться от хранилища - УСПЕШНО";
					Иначе
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Отключиться от хранилища  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
						БылиОшибки = Истина;
					КонецЕсли;
					ЗаписатьЛог(СтрокаДействие);		
				КонецЕсли;
				
				// Подключимся к старому хранилищу
				Если Не БылиОшибки Тогда 
					Если Запуск1С.ПодключитьКонфигурациюКХранилищу() Тогда
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Подключиться к хранилищу - УСПЕШНО";
					Иначе
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Подключиться к хранилищу  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
						БылиОшибки = Истина;
					КонецЕсли;
					ЗаписатьЛог(СтрокаДействие);		
				КонецЕсли;
				
				// Обновим конфигурацию из хранилища
				Если Не БылиОшибки Тогда
					Если Запуск1С.ОбновитьКонфигурациюИзХранилища(,,,ОбновлятьКонфигурациюПослеЗагрузки) Тогда
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Обновить конфигурацию из хранилища - УСПЕШНО";
					Иначе
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Обновить конфигурацию из хранилища  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
						БылиОшибки = Истина;
					КонецЕсли;
					ЗаписатьЛог(СтрокаДействие);		
				КонецЕсли;
				
				// Обновить конфигурацию базы данных
				Если Не БылиОшибки И НЕ ОбновлятьКонфигурациюПослеЗагрузки Тогда
					Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Обновить конфигурацию базы данных - УСПЕШНО";
					Иначе
						СтрокаДействие = "Расширение: " + Расширение.Имя + " - " + "Обновить конфигурацию базы данных  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
						БылиОшибки = Истина;
					КонецЕсли;
					ЗаписатьЛог(СтрокаДействие);		
				КонецЕсли;
				
			КонецЕсли;
		КонецЦИкла;
	КонецЕсли;
	
	Если Не БылиОшибки И ЗначениеЗаполнено(БазаПриемник.ПроизвольныйКодПослеВсехОперацийДоСнятияБлокировки) 
		И НЕ СписокШагов.Найти("Выполнить произвольный код после всех действий") = Неопределено Тогда
		Запуск1С.ПараметрыЗапуска.ИмяРасширения = "ВыполнениеКодаИзПерезаливатора";
		Если НЕ РасширениеВыполненияКодаУстановлено Тогда
			Если Запуск1С.ЗагрузитьКонфигурациюИзФайла("ExtRunCode.cfe") Тогда
				СтрокаДействие = "Подключение расширения для выполнения кода - УСПЕШНО";
			Иначе
				СтрокаДействие = "Подключение расширения для выполнения кода - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);	
			
			Если Не БылиОшибки Тогда
				Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
					СтрокаДействие = "Обновить конфигурацию базы данных - УСПЕШНО";
				Иначе
					СтрокаДействие = "Обновить конфигурацию базы данных  - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
					БылиОшибки = Истина;
				КонецЕсли;
				ЗаписатьЛог(СтрокаДействие);		
			КонецЕсли;
		Иначе
			СтрокаДействие = "Подключение расширения для выполнения кода - УЖЕ УСТАНОВЛЕНО";
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
		
		
		
		Если Не БылиОшибки Тогда
			Попытка
				
				// Получаем COMConnector
				Коннектор = Новый COMОбъект("v" + Запуск1С.ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
				// Получаем Соединение с базой данных
				ПараметрыПодключенияКБазеИсточника = "Srvr=""" + Запуск1С.ПараметрыЗапуска.АдресКластера + 
				""";Ref=""" + Запуск1С.ПараметрыЗапуска.ИмяБазы + 
				""";Usr=""" + Запуск1С.ПараметрыЗапуска.ИмяПользователя + 
				""";Pwd=""" + Запуск1С.ПараметрыЗапуска.ПарольПользователя + 
				?(ЗначениеЗаполнено(Запуск1С.ПараметрыЗапуска.КодРазрешения), """;UC=""" + Запуск1С.ПараметрыЗапуска.КодРазрешения,"") + """;";
				
				СоединениеСБазой = Коннектор.Connect(ПараметрыПодключенияКБазеИсточника);
				
				РезультатВыполненияКода = СоединениеСБазой.ВКИП_ВыполнениеКода.ВыполнитьКод(БазаПриемник.ПроизвольныйКодСразуПослеВосстановленияБекапа);
				СтрокаДействие = "Код после восстановления выполнен - УСПЕШНО: " + РезультатВыполненияКода;
				
			Исключение		
				ТекстОшибки = ОписаниеОшибки();
				СтрокаДействие = "Код после восстановления НЕ выполнен - ОШИБКА: " + ТекстОшибки;
			КонецПопытки;	
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);
		
		Если РасширениеВыполненияКодаУстановлено Тогда
			Если Запуск1С.УдалитьКонфигурациюРасширенияБазыДанных() Тогда
				СтрокаДействие = "Удаление расширения для выполнения код - УСПЕШНО";
			Иначе
				СтрокаДействие = "Удаление расширения для выполнения код - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			ЗаписатьЛог(СтрокаДействие);
		КонецЕсли;
		Запуск1С.ПараметрыЗапуска.ИмяРасширения = "";
	КонецЕсли;
	
	// Снимем блокировку начала сеансов
	Если Не НетДоступаККонсолиКластера 
		И НЕ СписокШагов.Найти("Снять блокировку сеансов") = Неопределено Тогда
		Если Запуск1С.СнятьБлокировкуНачалаСеансов(Ложь) Тогда
			СтрокаДействие = "Снять блокировку начала сеансов - УСПЕШНО";
		Иначе
			СтрокаДействие = "Снять блокировку начала сеансов - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	// Отправляем эклектронное сообщение с файлом лога во вложении
	Если БазаВосстановлена И ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда
		
		СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
		СтруктураСообщения.ТемаСообщения = "### Перезалита база данных. Источник - """ + БазаИсточник.Имя + """, Назначение - """ + БазаПриемник.Имя + """";
		Если БылиОшибки Тогда
			СтруктураСообщения.ТекстСообщения = "ВНИМАНИЕ! " + Символы.ПС + 
			СтруктураСообщения.ТемаСообщения + Символы.ПС +
			"Но не все операции были выполнены. Смотрите лог-файл во вложении.";
		Иначе
			СтруктураСообщения.ТекстСообщения = СтруктураСообщения.ТемаСообщения + Символы.ПС + 
			"Все операции были выполнены УСПЕШНО.";
		КонецЕсли;
		
		// Часть имеющегося лога добавим в письмо
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		КопироватьФайл(Логирование.ИмяФайлаЛога,ИмяВременногоФайла);
		СтруктураСообщения.Вложения = ИмяВременногоФайла;
		
		// Отправим сообщение
		Если УправлениеЭП.ОтправитьСообщение() Тогда
			СтрокаДействие = "Отправить электорнное сообщение - УСПЕШНО. Адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя;
		Иначе
			СтрокаДействие = "Отправить электорнное сообщение - ОШИБКА: " + УправлениеЭП.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		ЗаписатьЛог(СтрокаДействие);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	СтрокаДействие  = "Завершение выполнения обработки.";
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	
	Возврат Не БылиОшибки;
	
КонецФункции

//******************************************************************
Инициализация();
