#Использовать sql
#Использовать asserts
#Использовать messenger 
#Использовать json

Перем Соединение, BotID, ServiceID, Мессенджер, СообщениеОтАдмина Экспорт;


Процедура ПрочитатьСообщения()
	
	БазаДанныхСуществует();
	ПоследнийНомер = ПоследнийНомер();
	
	
	ПараметрыЗапроса = Новый Структура;
	
	Если НЕ ПоследнийНомер = Неопределено Тогда
		ПараметрыЗапроса.Вставить("offset", Формат(ПоследнийНомер+1, "ЧГ="));
	КонецЕсли;
	
	
	
	ПулСообщений = ВызватьМетодTelegramAPI("getUpdates",ПараметрыЗапроса);
	
	Если ПулСообщений.КодСостояния <> 200 Тогда
		ОтправитьСообщение("Ошибка при опросе новый сообщений:" + Символы.ПС + ПулСообщений.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Парсер = Новый ПарсерJSON();
	Ответ = Парсер.ПрочитатьJSON(ПулСообщений.ПолучитьТелоКакСтроку(),,, Истина);
	
	Ожидаем.Что(Ответ.ok).ЭтоИстина();
	
	Для Каждого Сообщение Из Ответ.result Цикл
		
		Если Сообщение.Свойство("message") Тогда //сообщения
			Отправитель = Сообщение.message.from;
			СообщениеОтАдмина = НЕ ServiceID.Найти(Отправитель.id) = Неопределено; 
			
			Если СтатусПользователя(Отправитель.id) = 0 Тогда //ожидает одобрения
				ОтправитьСообщение("Администратор еще не одобрил вашу регистрацию", Отправитель.id);				
			ИначеЕсли СтатусПользователя(Отправитель.id) = 1 Тогда //одобрен
				Сообщить("Одобрен")
			ИначеЕсли СтатусПользователя(Отправитель.id) = 2 Тогда //в игнор листе
				//Или любой другой текст, чкоторый бы несильно обидел человека, что его отправили в игнор.
				ОтправитьСообщение("Произошла ошибка подключения", Отправитель.id);
				Сообщить("Пользователь " + Отправитель.first_name + " (" + Отправитель.id + ")" + " в игноре.")						
			ИначеЕсли СтатусПользователя(Отправитель.id) = -1 Тогда
				
				Если СообщениеОтАдмина Тогда
					//Админа добавляем сразу
					ОбновитьСтатусПользователя(Отправитель.id, 1, Отправитель.first_name, 0);
					ОтправитьСообщение("Вы добавлены как администратор", Отправитель.id);
				Иначе
					Для Каждого ChatID Из ServiceID Цикл
						ОтправитьСообщениеАвторизации(ChatID, Отправитель);
					КонецЦикла;
					ОбновитьСтатусПользователя(Отправитель.id, 0, Отправитель.first_name, 0);
					ОтправитьСообщение("Ваш запрос принят, ожидайте уведомления администратора", Отправитель.id);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Сообщение.Свойство("callback_query") Тогда //события клавиатуры
			СообщениеОтАдмина = НЕ ServiceID.Найти(Сообщение.callback_query.from.id) = Неопределено;
			Если НЕ СообщениеОтАдмина Тогда Продолжить КонецЕсли;//только админы могут отвечать
				ТекстСообщения = "";
				IDПользователя = Число(Прав(Сообщение.callback_query.data,СтрДлина(Сообщение.callback_query.data)-2));
				ДанныеПользователя =  СтатусПользователя(IDПользователя, Ложь);
				Если СтрНачинаетсяС(Сообщение.callback_query.data, "AY") Тогда //подтвердить
					ТекстСообщения = "✔ Авторизация %1 с ID %2 подтверждена.";
					ОбновитьСтатусПользователя(IDПользователя, 1);
					ОтправитьСообщение("Администратор вас авторизовал", IDПользователя);
				ИначеЕсли СтрНачинаетсяС(Сообщение.callback_query.data, "AN") Тогда // отклонить
					ТекстСообщения = "✖ Авторизация %1 с ID %2 отклонена.";
					ОбновитьСтатусПользователя(IDПользователя, 3);
					ОтправитьСообщение("Администратор отклонил вашу авторизацию", IDПользователя);
				ИначеЕсли СтрНачинаетсяС(Сообщение.callback_query.data, "AI") Тогда // игнорировать
					ТекстСообщения = "❌ Авторизация %1 с ID %2 игнорируется.";
					ОбновитьСтатусПользователя(IDПользователя, 2);
					ОтправитьСообщение("Произошла ошибка авторизации. Свяжитесь с администратором", IDПользователя);
				Иначе
					// пришла неведомая фигня, игнорируес
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеПользователя.Name, IDПользователя);
				Для Каждого ChatID Из ServiceID Цикл
					СкрытьКлавиатуруАвторизации(ChatID, ТекстСообщения);
				КонецЦикла;
				
			КонецЕсли;
			ОбновитьПоследнийНомер(Сообщение.update_id);
		КонецЦикла;
		
		Сообщить(ПулСообщений.ПолучитьТелоКакСтроку());
	КонецПроцедуры
	
	Процедура ОтправитьСообщениеАвторизации(ChatID, Отправитель)
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("chat_id",ChatID);
		ПараметрыЗапроса.Вставить("text","Хочет добавиться новый пользователь " + Отправитель.first_name + " с ID " + Отправитель.id );
		//https://apps.timwhitlock.info/emoji/tables/unicode
		ПараметрыЗапроса.Вставить("reply_markup",
		"{
		|""inline_keyboard"":[
		|	[
		|		{""text"":""✔ Добавить"",""callback_data"":""AY"+ Отправитель.id +"""},
		|		{""text"":""✖ Отказать"",""callback_data"":""AN"+ Отправитель.id +"""},
		|		{""text"":""❌ Игнорировать"",""callback_data"":""AI"+ Отправитель.id +"""}
		|	]
		|],
		|""one_time_keyboard"":true
		|}");
		ВызватьМетодTelegramAPI("sendMessage",ПараметрыЗапроса);
	КонецПроцедуры
	
	Процедура СкрытьКлавиатуруАвторизации(ChatID, Сообщение)
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("chat_id",ChatID);
		ПараметрыЗапроса.Вставить("text",Сообщение);
		ПараметрыЗапроса.Вставить("reply_markup",	"{""inline_keyboard"":[[]]}");
		ВызватьМетодTelegramAPI("sendMessage",ПараметрыЗапроса);
	КонецПроцедуры
	
	
	Функция ОбновитьПоследнийНомер(IDСообщения)
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		
		ЗапросВставка.Текст = "delete from lastID ";
		ЗапросВставка.ВыполнитьКоманду();
		
		ЗапросВставка.Текст = "insert into lastID (id) values(@id)";
		ЗапросВставка.УстановитьПараметр("id", IDСообщения);
		ЗапросВставка.ВыполнитьКоманду();
	КонецФункции
	
	Функция ПоследнийНомер()
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		ЗапросВставка.Текст = "select * from lastID";
		ТЗ = ЗапросВставка.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() Тогда
			Возврат ТЗ[0].id;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции
	
	// Получить статус пользователя
	//
	// Параметры:
	//  IDПользователя  - число - id пользователя
	//
	Функция СтатусПользователя(IDПользователя, ВозвращатьТолькоСтатус = Истина)
		
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		ЗапросВставка.Текст = "select * from usersID where id = @id";
		ЗапросВставка.УстановитьПараметр("id", IDПользователя);
		ТЗ = ЗапросВставка.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() > 0 Тогда
			Если ВозвращатьТолькоСтатус Тогда
				Возврат ТЗ[0].status;
			Иначе
				Возврат ТЗ[0]
			КонецЕсли;
		Иначе Возврат -1; //Новый пользователь
		КонецЕсли;
	КонецФункции
	
	// Обновляет текущий статус пользователя
	//
	// Параметры:
	//  ClientID  	- Число - ID пользователя в чате
	//  Status  	- Байт - Статус клиента
	//  			0 - Пользователь ожидает одобрения
	//				1 - Пользователь одобрен
	//  			2 - Пользователь в игнор листе (любое взаимодействие с ним игнорируется)
	//				3 - Пользователя авторизация отклонена
	//  Name  		- Строка - Имя пользователя телеграм
	//  Обновление  - Булево - Вид обновления статуса
	//				Истина - Обновляет ранее созданую запись
	//				Ложь - Добавляет новую запись
	//
	Процедура ОбновитьСтатусПользователя(ClientID, Status, Name = "", Обновление = Истина)
		
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		Если Обновление Тогда 
			ЗапросВставка.Текст = "update usersID set status = @status where id = @id";
		Иначе
			ЗапросВставка.Текст = "insert into usersID (id, name, status) values(@id, @name, @status)";
		КонецЕсли;
		ЗапросВставка.УстановитьПараметр("id", ClientID);
		ЗапросВставка.УстановитьПараметр("name", Name);
		ЗапросВставка.УстановитьПараметр("status", Status);
		Результат = ЗапросВставка.ВыполнитьКоманду();
		Ожидаем.Что(Результат).Равно(1);
		
	КонецПроцедуры
	
	Функция БазаДанныхСуществует()
		ФайлБД = Новый Файл("sqlite\telegram.sqlite");
		ПолноеИмяБД = ФайлБД.ПолноеИмя;
		
		Соединение = Новый Соединение();
		Соединение.ТипСУБД = Соединение.ТипыСУБД.sqlite;
		Соединение.ИмяБазы = ПолноеИмяБД;
		
		Если (ФайлБД.Существует()) Тогда
			Соединение.Открыть();
			Возврат Истина;
		КонецЕсли;
		
		Соединение.Открыть();
		
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		
		ЗапросВставка.Текст = "Create table usersID (id integer, name text, status byte)";
		ЗапросВставка.ВыполнитьКоманду();
		
		ЗапросВставка = Новый Запрос();
		ЗапросВставка.УстановитьСоединение(Соединение);
		ЗапросВставка.Текст = "Create table lastID (id integer)";
		ЗапросВставка.ВыполнитьКоманду();
		
		Ожидаем.Что(ФайлБД.Существует()).ЭтоИстина();
		
		Освободитьобъект(ФайлБД);
		
		ОтправитьСообщение("Была создана новая база данных пользователей Telegram"); 
		
		Возврат Истина;
	КонецФункции
	
	Процедура ОтправитьСообщение(ТекстСообщения, IDПользователя = Неопределено) Экспорт
		МассивПолучателей = Новый Массив;
		Если IDПользователя = Неопределено Тогда
			МассивПолучателей = ServiceID;
		ИначеЕсли НЕ ТипЗнч(IDПользователя) = Тип("Массив") Тогда
			МассивПолучателей.Добавить(IDПользователя);
		Иначе
			МассивПолучателей = IDПользователя;
		КонецЕсли;
		Для Каждого Пользователь Из МассивПолучателей Цикл
			Мессенджер.ОтправитьСообщение("telegram", Пользователь, "```" + Символы.ПС + ТекстСообщения + Символы.ПС + "```", ,"md");
		КонецЦикла;
	КонецПроцедуры
	
	Функция ВызватьМетодTelegramAPI(ИмяМетода, Параметры)
		
		СтрокаПараметров = "";
		Для Каждого Параметр Из Параметры Цикл
			
			Шаблон = "%1=%2&";
			СтрокаПараметров = СтрокаПараметров + СтрШаблон(Шаблон, Параметр.Ключ, СтрЗаменить(Параметр.Значение, Символы.ПС, ""));
			
		КонецЦикла;	
		
		ИмяСервера = "https://api.telegram.org";
		
		URL = "/bot"
		+ BotID
		+ "/" + ИмяМетода
		+ "?" + СтрокаПараметров;
		
		HTTPЗапрос = Новый HTTPЗапрос(URL);
		
		HTTP = Новый HTTPСоединение(ИмяСервера);
		ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
		
		Возврат ОтветHTTP;
		
	КонецФункции
	
	
	BotID = "628738246:AAE6jj2iA0dOiNavmBtC7aOK9y6CB5VjDxk"; //ID бота, который будет принимать команды
	ServiceID = Новый Массив;
	ServiceID.Добавить(205872483); //ID пользователя, который будет получать все ошибки, включая ошибки регистрации
	Соединение = Неопределено;
	СообщениеОтАдмина = Ложь;
	
	Мессенджер = Новый Мессенджер();
	Мессенджер.ИнициализироватьТранспорт("telegram", Новый Структура("Логин", BotID));
	
	ПрочитатьСообщения();
	
	Если НЕ Соединение = Неопределено Тогда
		Соединение.Закрыть();
	КонецЕсли;