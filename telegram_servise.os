#Использовать sql
#Использовать asserts
#Использовать messenger 
#Использовать json

Перем Соединение, BotID, ServiceID, Мессенджер, СообщениеОтАдмина, ДоступныеКоманды, ДоступныеКомандыАдмина Экспорт;
Перем СоответствияСтатусов, ИмяФайлаНастроекПоУмолчанию Экспорт;

Процедура ПрочитатьСообщения()
	
	БазаДанныхСуществует();
	
	
	
	ПоследнийНомер = ПоследнийНомер();
	
	
	ПараметрыЗапроса = Новый Структура;
	
	Если НЕ ПоследнийНомер = Неопределено Тогда
		ПараметрыЗапроса.Вставить("offset", Формат(ПоследнийНомер+1, "ЧГ="));
	КонецЕсли;
	
	
	
	ПулСообщений = ВызватьМетодTelegramAPI("getUpdates",ПараметрыЗапроса);
	
	Если ПулСообщений.КодСостояния <> 200 Тогда
		ОтправитьСообщение("Ошибка при опросе новый сообщений:" + Символы.ПС + ПулСообщений.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Парсер = Новый ПарсерJSON();
	Ответ = Парсер.ПрочитатьJSON(ПулСообщений.ПолучитьТелоКакСтроку(),,, Истина);
	
	Ожидаем.Что(Ответ.ok).ЭтоИстина();
	СтатусБота = СтатусБлокировкиБота();
	Для Каждого Сообщение Из Ответ.result Цикл
		
		Если Сообщение.Свойство("message") Тогда //сообщения
			Отправитель = Сообщение.message.from;
			СообщениеОтАдмина = НЕ ServiceID.Найти(Отправитель.id) = Неопределено; 
			
			Если СтатусБота.БотСейчасЗаблокирован И НЕ СообщениеОтАдмина Тогда
				ОтправитьСообщение("Бот сейчас заблокирован. Повторите попытку позже.", Отправитель.id);
				
			Иначе
				
				Если СтатусПользователя(Отправитель.id) = 0 Тогда //ожидает одобрения
					ОтправитьСообщение("Администратор еще не одобрил вашу регистрацию", Отправитель.id);				
				ИначеЕсли СтатусПользователя(Отправитель.id) = 1 Тогда //одобрен
					ВыполнитьКоманду(Сообщение.message,СообщениеОтАдмина);
				ИначеЕсли СтатусПользователя(Отправитель.id) = 2 Тогда //в игнор листе
					//Или любой другой текст, который бы не сильно обидел человека, за то, что его отправили в игнор.
					ОтправитьСообщение("Произошла ошибка подключения", Отправитель.id);
					//Сообщить("Пользователь " + Отправитель.first_name + " (" + Отправитель.id + ")" + " в игноре.")						
				ИначеЕсли СтатусПользователя(Отправитель.id) = -1 Тогда
					
					Если СообщениеОтАдмина Тогда
						//Админа добавляем сразу
						ОбновитьСтатусПользователя(Отправитель.id, 1, Отправитель.first_name, 0);
						ОтправитьСообщение("Вы добавлены как администратор", Отправитель.id);
					Иначе
						Для Каждого ChatID Из ServiceID Цикл
							ОтправитьСообщениеАвторизации(ChatID, СтрШаблон("Хочет добавиться новый пользователь %1 с ID %2", Отправитель.first_name, Отправитель.id),Отправитель.id);
						КонецЦикла;
						ОбновитьСтатусПользователя(Отправитель.id, 0, Отправитель.first_name, 0);
						ОтправитьСообщение("Ваш запрос принят, ожидайте уведомления администратора", Отправитель.id);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Сообщение.Свойство("callback_query") Тогда //события клавиатуры
			СообщениеОтАдмина = НЕ ServiceID.Найти(Сообщение.callback_query.from.id) = Неопределено;
			Если НЕ СообщениеОтАдмина Тогда 
				Продолжить 
			КонецЕсли;//только админы могут отвечать
			ТекстСообщения = "";
			IDПользователя = Число(Прав(Сообщение.callback_query.data,СтрДлина(Сообщение.callback_query.data)-2));
			ДанныеПользователя =  СтатусПользователя(IDПользователя, Ложь);
			Если СтрНачинаетсяС(Сообщение.callback_query.data, "AY") Тогда //подтвердить
				ТекстСообщения = "✔ Авторизация %1 с ID %2 подтверждена.";
				ОбновитьСтатусПользователя(IDПользователя, 1);
				ОтправитьСообщение("Администратор вас авторизовал. Используйте /help для просмотра доступных команд.", IDПользователя);
			ИначеЕсли СтрНачинаетсяС(Сообщение.callback_query.data, "AN") Тогда // отклонить
				ТекстСообщения = "✖ Авторизация %1 с ID %2 отклонена.";
				ОбновитьСтатусПользователя(IDПользователя, 3);
				ОтправитьСообщение("Администратор отклонил вашу авторизацию", IDПользователя);
			ИначеЕсли СтрНачинаетсяС(Сообщение.callback_query.data, "AI") Тогда // игнорировать
				ТекстСообщения = "❌ Авторизация %1 с ID %2 игнорируется.";
				ОбновитьСтатусПользователя(IDПользователя, 2);
				ОтправитьСообщение("Произошла ошибка авторизации. Свяжитесь с администратором", IDПользователя);
			Иначе
				// пришла неведомая фигня, игнорируес
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеПользователя.Name, IDПользователя);
			Для Каждого ChatID Из ServiceID Цикл
				СкрытьКлавиатуруАвторизации(ChatID, ТекстСообщения);
			КонецЦикла;
			
		КонецЕсли;
		ОбновитьПоследнийНомер(Сообщение.update_id);
	КонецЦикла;
	
	//Сообщить(ПулСообщений.ПолучитьТелоКакСтроку());
КонецПроцедуры

Процедура ОтправитьСообщениеАвторизации(ChatID, ТекстСообщения, IDПользователя)
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("chat_id",ChatID);
	ПараметрыЗапроса.Вставить("text", ТекстСообщения);
	//https://apps.timwhitlock.info/emoji/tables/unicode
	ПараметрыЗапроса.Вставить("reply_markup",
	"{
	|""inline_keyboard"":[
	|	[
	|		{""text"":""✔ Добавить"",""callback_data"":""AY"+ IDПользователя +"""},
	|		{""text"":""✖ Отказать"",""callback_data"":""AN"+ IDПользователя +"""},
	|		{""text"":""❌ Игнорировать"",""callback_data"":""AI"+ IDПользователя +"""}
	|	]
	|],
	|""one_time_keyboard"":true
	|}");
	ВызватьМетодTelegramAPI("sendMessage",ПараметрыЗапроса);
КонецПроцедуры

Процедура СкрытьКлавиатуруАвторизации(ChatID, Сообщение)
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("chat_id",ChatID);
	ПараметрыЗапроса.Вставить("text",Сообщение);
	ПараметрыЗапроса.Вставить("reply_markup",	"{""inline_keyboard"":[[]]}");
	ВызватьМетодTelegramAPI("sendMessage",ПараметрыЗапроса);
КонецПроцедуры


Функция ОбновитьПоследнийНомер(IDСообщения)
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	
	ЗапросВставка.Текст = "delete from lastID ";
	ЗапросВставка.ВыполнитьКоманду();
	
	ЗапросВставка.Текст = "insert into lastID (id) values(@id)";
	ЗапросВставка.УстановитьПараметр("id", IDСообщения);
	ЗапросВставка.ВыполнитьКоманду();
КонецФункции

Функция ПоследнийНомер()
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ЗапросВставка.Текст = "select * from lastID";
	ТЗ = ЗапросВставка.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() Тогда
		Возврат ТЗ[0].id;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Получить статус пользователя
//
// Параметры:
//  IDПользователя  - число - id пользователя
//
Функция СтатусПользователя(IDПользователя = Неопределено, ВозвращатьТолькоСтатус = Истина)
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	ЗапросВставка.Текст = "select * from usersID " + ?(ЗначениеЗаполнено(IDПользователя), " where id = @id", "");
	Если ЗначениеЗаполнено(IDПользователя) Тогда
		ЗапросВставка.УстановитьПараметр("id", IDПользователя);
	КонецЕсли;
	ТЗ = ЗапросВставка.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Если ВозвращатьТолькоСтатус Тогда
			Возврат ТЗ[0].status;
		Иначе
			Возврат ?(ЗначениеЗаполнено(IDПользователя), ТЗ[0], ТЗ)
		КонецЕсли;
	Иначе Возврат -1; //Новый пользователь
	КонецЕсли;
КонецФункции

// Обновляет текущий статус пользователя
//
// Параметры:
//  ClientID  	- Число - ID пользователя в чате
//  Status  	- Байт - Статус клиента
//  			0 - Пользователь ожидает одобрения
//				1 - Пользователь одобрен
//  			2 - Пользователь в игнор листе (любое взаимодействие с ним игнорируется)
//				3 - Пользователя авторизация отклонена
//  Name  		- Строка - Имя пользователя телеграм
//  Обновление  - Булево - Вид обновления статуса
//				Истина - Обновляет ранее созданую запись
//				Ложь - Добавляет новую запись
//
Процедура ОбновитьСтатусПользователя(ClientID, Status, Name = "", Обновление = Истина)
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	Если Обновление Тогда 
		ЗапросВставка.Текст = "update usersID set status = @status where id = @id";
	Иначе
		ЗапросВставка.Текст = "insert into usersID (id, name, status) values(@id, @name, @status)";
	КонецЕсли;
	ЗапросВставка.УстановитьПараметр("id", ClientID);
	ЗапросВставка.УстановитьПараметр("name", Name);
	ЗапросВставка.УстановитьПараметр("status", Status);
	Результат = ЗапросВставка.ВыполнитьКоманду();
	Ожидаем.Что(Результат).Равно(1);
	
КонецПроцедуры

Функция БазаДанныхСуществует()
	ФайлБД = Новый Файл("sqlite\telegram.sqlite");
	ПолноеИмяБД = ФайлБД.ПолноеИмя;
	
	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.sqlite;
	Соединение.ИмяБазы = ПолноеИмяБД;
	
	Если (ФайлБД.Существует()) Тогда
		Соединение.Открыть();
		Возврат Истина;
	КонецЕсли;
	
	Соединение.Открыть();
	
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	
	ЗапросВставка.Текст = "Create table usersID (id integer, name text, status byte)";
	ЗапросВставка.ВыполнитьКоманду();
	
	ЗапросВставка.Текст = "Create table lastID (id integer)";
	ЗапросВставка.ВыполнитьКоманду();
	
	ЗапросВставка.Текст = "Create table lockBot (time integer, period datetime)";
	ЗапросВставка.ВыполнитьКоманду();
	
	ЗапросВставка.Текст = "insert into lockBot (time,period) values(@time, @period)";
	ЗапросВставка.УстановитьПараметр("time", 0);
	ЗапросВставка.УстановитьПараметр("period", ТекущаяДата());
	ЗапросВставка.ВыполнитьКоманду();
	
	Ожидаем.Что(ФайлБД.Существует()).ЭтоИстина();
	
	Освободитьобъект(ФайлБД);
	
	ОтправитьСообщение("Была создана новая база данных пользователей Telegram"); 
	
	Возврат Истина;
КонецФункции

Процедура ОтправитьСообщение(ТекстСообщения, IDПользователя = Неопределено) Экспорт
	МассивПолучателей = Новый Массив;
	Если IDПользователя = Неопределено Тогда
		МассивПолучателей = ServiceID;
	ИначеЕсли НЕ ТипЗнч(IDПользователя) = Тип("Массив") Тогда
		МассивПолучателей.Добавить(IDПользователя);
	Иначе
		МассивПолучателей = IDПользователя;
	КонецЕсли;
	Для Каждого Пользователь Из МассивПолучателей Цикл
		Мессенджер.ОтправитьСообщение("telegram", Пользователь, "```" + Символы.ПС + ТекстСообщения + Символы.ПС + "```", ,"md");
	КонецЦикла;
КонецПроцедуры

Функция ВызватьМетодTelegramAPI(ИмяМетода, Параметры)
	
	СтрокаПараметров = "";
	Для Каждого Параметр Из Параметры Цикл
		
		Шаблон = "%1=%2&";
		СтрокаПараметров = СтрокаПараметров + СтрШаблон(Шаблон, Параметр.Ключ, СтрЗаменить(Параметр.Значение, Символы.ПС, ""));
		
	КонецЦикла;	
	
	ИмяСервера = "https://api.telegram.org";
	
	URL = "/bot"
	+ BotID
	+ "/" + ИмяМетода
	+ "?" + СтрокаПараметров;
	
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	
	HTTP = Новый HTTPСоединение(ИмяСервера);
	ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Возврат ОтветHTTP;
	
КонецФункции


Функция ДоступныеНастройки(ИмяФайла = "") Экспорт
	
	Данные = Новый ЧтениеТекста(?(ЗначениеЗаполнено(ИмяФайла), ИмяФайла, ИмяФайлаНастроекПоУмолчанию));
	
	Парсер = Новый ПарсерJSON();
	Возврат Парсер.ПрочитатьJSON(Данные.Прочитать(),,,Истина);
КонецФункции

//Обработка запроса авторизованного пользователя
Процедура ВыполнитьКоманду(Сообщение, Админ)
	СообщениеПользователю = "Произошла непредвиденная ошибка.";
	НайденаКомандаАдмина = Ложь;
	Если Админ Тогда
		
		Если нРег(Сообщение.text) = "/users" Тогда
			НайденаКомандаАдмина = Истина;
			ТекущиеПользователи = СтатусПользователя(, Ложь);
			МассивПользователей = Новый Массив;
			
			Для Каждого Пользователь Из ТекущиеПользователи Цикл
				ОтправитьСообщениеАвторизации(Сообщение.from.id, СтрШаблон("Пользователь %1 с ID %2 в статусе %3 ",Пользователь.Name,Пользователь.ID, СоответствияСтатусов[Пользователь.status]),Пользователь.ID);
			КонецЦикла;
			Возврат;
		ИначеЕсли СтрНачинаетсяС(нРег(Сообщение.text), "/lock") Тогда
			Параметры = СтрРазделить(Сообщение.text," ");
			Если Параметры[0] = "/lock" Тогда
				БлокировкаБота(?(Параметры.Количество() = 1, -1, Параметры[1]));
				Сообщение.text = "/lockstat";
			КонецЕсли;
			
		ИначеЕсли нРег(Сообщение.text) =  "/unlock" Тогда
			БлокировкаБота(0);
			Сообщение.text = "/lockstat";
		Иначе
			СообщениеПользователю = "Я не понял команду. Используйте /help для просмотра доступных команд";
		КонецЕсли;
		Если НайденаКомандаАдмина Тогда
			ОтправитьСообщение(СообщениеПользователю, Сообщение.from.id);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если нРег(Сообщение.text) = "/help" Тогда
		СообщениеПользователю = ДоступныеКоманды;
		Если Админ Тогда
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + ДоступныеКомандыАдмина;
		КонецЕсли;
	ИначеЕсли нРег(Сообщение.text) = "/source" Тогда
		ДоступныеБазы = ДоступныеНастройки();
		МассивБаз = Новый Массив;
		Для Каждого Источник Из ДоступныеБазы.Источники Цикл
			МассивБаз.Добавить(Источник.Имя)
		КонецЦикла;
		СообщениеПользователю = СтрСоединить(МассивБаз, Символы.ПС);
	ИначеЕсли нРег(Сообщение.text) = "/dest" Тогда
		ДоступныеБазы = ДоступныеНастройки();
		МассивБаз = Новый Массив;
		Для Каждого Приемник Из ДоступныеБазы.Приемники Цикл
			МассивБаз.Добавить(Приемник.Имя)
		КонецЦикла;
		СообщениеПользователю = СтрСоединить(МассивБаз, Символы.ПС);
	ИначеЕсли нРег(Сообщение.text) = "/lockstat" Тогда
		ТекущийСтатусБлокировки = СтатусБлокировкиБота();	
		
		Если ТекущийСтатусБлокировки.Длительность = 0 Тогда
			СообщениеПользователю = "Работа не заблокирована. Статус изменен в " + ТекущийСтатусБлокировки.Дата;
		ИначеЕсли ТекущийСтатусБлокировки.Длительность = -1 Тогда
			СообщениеПользователю = "Работа заблокирована на неограниченный срок. Статус изменен в " + ТекущийСтатусБлокировки.Дата;
		Иначе	
			СообщениеПользователю = "Работа заблокирована до " + (ТекущийСтатусБлокировки.Дата + ТекущийСтатусБлокировки.Длительность*60) + ". Статус изменен в " + ТекущийСтатусБлокировки.Дата;
		КонецЕсли;
	Иначе
		СообщениеПользователю = "Я не понял команду. Используйте /help для просмотра доступных команд";
	КонецЕсли;
	
	ОтправитьСообщение(СообщениеПользователю, Сообщение.from.id);
	
КонецПроцедуры

Процедура БлокировкаБота(Длительность = 0)
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	
	ЗапросВставка.Текст = "update lockBot set time = @time, period = @period";
	ЗапросВставка.УстановитьПараметр("time", Длительность);
	ЗапросВставка.УстановитьПараметр("period", ТекущаяДата());
	ЗапросВставка.ВыполнитьКоманду();
КонецПроцедуры

Функция СтатусБлокировкиБота()
	ЗапросВставка = Новый Запрос();
	ЗапросВставка.УстановитьСоединение(Соединение);
	
	ЗапросВставка.Текст = "select * from lockBot";
	ТЗ = ЗапросВставка.Выполнить().Выгрузить();
	
	Стр = Новый Структура("Длительность, Дата", ТЗ[0].time, ТЗ[0].period);
	
	БотСейчасЗаблокирован = Ложь;
	Если ТЗ[0].time = -1 Тогда
		БотСейчасЗаблокирован = Истина;
	ИначеЕсли ТЗ[0].time > 0 Тогда
		Если ТекущаяДата() > Стр.Дата + Стр.Длительность*60 Тогда
			БлокировкаБота();//Снимаем блокировку
			Стр.Длительность = 0;
			Стр.Дата = ТекущаяДата();
		Иначе
			БотСейчасЗаблокирован = Истина;
		КонецЕсли;		
	КонецЕсли;
	Стр.Вставить("БотСейчасЗаблокирован",БотСейчасЗаблокирован);
	Возврат Стр;
КонецФункции

BotID = "628738246:AAE6jj2iA0dOiNavmBtC7aOK9y6CB5VjDxk"; //ID бота, который будет принимать команды
ServiceID = Новый Массив;
ServiceID.Добавить(205872483); //ID пользователя, который будет получать все ошибки, включая ошибки регистрации
Соединение = Неопределено;
СообщениеОтАдмина = Ложь;
ИмяФайлаНастроекПоУмолчанию = "Perezalivator_Params.json";
Мессенджер = Новый Мессенджер();
Мессенджер.ИнициализироватьТранспорт("telegram", Новый Структура("Логин", BotID));

СоответствияСтатусов = Новый Соответствие;
СоответствияСтатусов.Вставить(-1, "Новый запрос");
СоответствияСтатусов.Вставить(0, "Ожидает авторизации");
СоответствияСтатусов.Вставить(1, "Авторизован");
СоответствияСтатусов.Вставить(2, "В листе игнора");
СоответствияСтатусов.Вставить(3, "Отклонен");

ДоступныеКоманды = "
|Список доступных команд для пользователя:
|/help   - выводит текущую справку
|/source - список доступных баз источников
|/dest   - список баз доступных приемников
|/lockstat   - текущий статус блокировки бота";

ДоступныеКомандыАдмина = "
|Список доступных команд для Админа:
|/users      - выводит список пользователей
|/lock       - блокирует обработку сообщений ботом, всем, кроме админов
|/lock [min] - блокирует работу бота на указаное количество минут, всем, кроме админов
|/unlock     - разблокирует работу с ботом";


ПрочитатьСообщения();

Если НЕ Соединение = Неопределено Тогда
	Соединение.Закрыть();
КонецЕсли;